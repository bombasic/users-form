{"ast":null,"code":"var _jsxFileName = \"/Users/abasic/react/apps/users-form/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    isValid: enteredNameisValid,\n    hasError: nameHasError,\n    valueChangeHandler: nameChangeHandler,\n    valueInputBlurHandler: nameBlurHandler,\n    resetValue: resetName\n  } = useInput(value => value.trim() !== \"\");\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailHasError,\n    valueChangeHandler: emailChangeHandler,\n    valueInputBlurHandler: emailBlurHandler,\n    resetValue: resetEmail\n  } = useInput(value => value.includes(\"@\"));\n  let formIsValid = false;\n\n  if (enteredNameisValid && enteredEmail) {\n    formIsValid = true;\n  }\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n\n    if (nameHasError || !enteredEmailIsValid) {\n      return;\n    }\n\n    console.log(enteredName + \" (state)\");\n    console.log(enteredEmail);\n    resetName();\n    setEnteredEmail(\"\");\n    setEnteredEmailTouched(false);\n  };\n\n  const nameInputClasses = !nameHasError ? \"form-control\" : \"form-control invalid\";\n  const emailInputClasses = !emailInputIsInvalid ? \"form-control\" : \"form-control invalid\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameChangeHandler,\n        onBlur: nameBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), nameHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"email\",\n        onChange: emailInputChangeHandler,\n        onBlur: emailInputBlurHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), emailInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Must include @\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"GoKsMcsyYNV+o1DIO/fNGQnvkps=\", false, function () {\n  return [useInput, useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/Users/abasic/react/apps/users-form/src/components/SimpleInput.js"],"names":["useState","useInput","SimpleInput","props","value","enteredName","isValid","enteredNameisValid","hasError","nameHasError","valueChangeHandler","nameChangeHandler","valueInputBlurHandler","nameBlurHandler","resetValue","resetName","trim","enteredEmail","enteredEmailIsValid","emailHasError","emailChangeHandler","emailBlurHandler","resetEmail","includes","formIsValid","formSubmissionHandler","event","preventDefault","console","log","setEnteredEmail","setEnteredEmailTouched","nameInputClasses","emailInputClasses","emailInputIsInvalid","emailInputChangeHandler","emailInputBlurHandler"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\n\nimport useInput from \"../hooks/use-input\";\n\nconst SimpleInput = (props) => {\n  const {\n    value: enteredName,\n    isValid: enteredNameisValid,\n    hasError: nameHasError,\n    valueChangeHandler: nameChangeHandler,\n    valueInputBlurHandler: nameBlurHandler,\n    resetValue: resetName,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailHasError,\n    valueChangeHandler: emailChangeHandler,\n    valueInputBlurHandler: emailBlurHandler,\n    resetValue: resetEmail,\n  } = useInput((value) => value.includes(\"@\"));\n\n  let formIsValid = false;\n\n  if (enteredNameisValid && enteredEmail) {\n    formIsValid = true;\n  }\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n\n    if (nameHasError || !enteredEmailIsValid) {\n      return;\n    }\n\n    console.log(enteredName + \" (state)\");\n    console.log(enteredEmail);\n\n    resetName();\n    setEnteredEmail(\"\");\n    setEnteredEmailTouched(false);\n  };\n\n  const nameInputClasses = !nameHasError\n    ? \"form-control\"\n    : \"form-control invalid\";\n  const emailInputClasses = !emailInputIsInvalid\n    ? \"form-control\"\n    : \"form-control invalid\";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          onChange={nameChangeHandler}\n          onBlur={nameBlurHandler}\n          value={enteredName}\n        />\n        {nameHasError && <p className=\"error-text\">Name must not be empty</p>}\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor=\"email\">Email</label>\n        <input\n          type=\"text\"\n          id=\"email\"\n          onChange={emailInputChangeHandler}\n          onBlur={emailInputBlurHandler}\n          value={enteredEmail}\n        />\n        {emailInputIsInvalid && <p className=\"error-text\">Must include @</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}